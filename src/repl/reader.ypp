%{
  #define YYSTYPE Data*
  #include "reader.h"
  #include <iostream>
  extern int yylex();
  extern int yyerror(Data**, char*);
  SymbolTable * symbol_table = new SymbolTable();
%}

%token INTEGER
%token SYMBOL
%parse-param { Data **expr }

%%

line:
/* empty */
//| line 
| line atom { *expr = $2; printf("parse complete.\n"); YYACCEPT; }
| line list { *expr = $2; printf("parse complete.\n"); YYACCEPT; }
| line quote { *expr = $2; printf("parse complete.\n"); YYACCEPT; }
;

atom:
INTEGER
| SYMBOL
;

quote:
'\'' atom { $$ = cons(internSymbol("quote", symbol_table), cons($2, NIL)); }
| '\'' list { $$ = cons(internSymbol("quote", symbol_table), cons($2, NIL)); }
;

list:
'(' sexp ')' { $$ = $2; }
;

sexp:
/* empty */ { $$ = NIL; }
| atom { $$ = cons($1, NIL); }
| list { $$ = cons($1, NIL); }
| atom sexp { $$ = cons($1, $2); }
| list sexp { $$ = cons($1, $2); }
| quote { $$ = cons($1, NIL); }
| quote sexp { $$ = cons($1, $2); }
;

%%
#include "Ponzi.h"
#include "boost/cast.hpp"

using namespace boost;

Data* cons(Data * x, Data * y)
{
    return new Cons(x, y);
}

Data* internSymbol(char * str, SymbolTable * symtab)
{
    return symtab->InternSymbol(str);
}

Data* makeInt(char * str)
{
    return new Number(atoi(str));
}

int yyerror( Data** dat, char *str )
{
  printf("reader error: %s\n", str);
}

int yywrap()
{
  return 1;
}

Data* Car(std::vector<Data*> args)
{
    if( args.size() == 1 ) 
        // Data::Car() on non-cons is a check exception
        return args[0]->Car();
    else throw BADARGS;
}

Data* Cdr(std::vector<Data*> args)
{
    if( args.size() == 1 ) 
        // Data::Cdr() on non-cons is a check exception
        return args[0]->Cdr();
    else throw BADARGS;
}

Data* Equal(std::vector<Data*> args)
{
    if( args.size() == 2 ) 
        return new Bool(args[0] == args[1]);
    else throw BADARGS;
}

Data* NumberAdd(std::vector<Data*> args)
{
    if( !args.empty() ) {
        int num_val = 0;
        std::vector<Data*>::iterator it = args.begin();
        for( ; it != args.end(); ++it) 
            num_val += polymorphic_cast<Number*>(*it)->GetValue();
        return new Number(num_val);
    }
    throw BADARGS;
}

Data* NumberMinus(std::vector<Data*> args)
{
    if( !args.empty() ) {
        int num_val = 0;
        std::vector<Data*>::iterator it = args.begin();
        if( (*it)->IsA(NUMBER) ) {
            num_val = polymorphic_cast<Number*>(*it)->GetValue();
            ++it;
            for( ; it != args.end(); ++it) 
                num_val -= polymorphic_cast<Number*>(*it)->GetValue();
            return new Number(num_val);
        }
    }
    throw BADARGS;
}

Data* NumberMul(std::vector<Data*> args)
{
    if( !args.empty() ) {
        int num_val = 1;
        std::vector<Data*>::iterator it = args.begin();
        for( ; it != args.end(); ++it) 
            num_val *= polymorphic_cast<Number*>(*it)->GetValue();
        return new Number(num_val);
    } 
    throw BADARGS;
}

Data* GetRefCount(std::vector<Data*> args)
{
    if( !args.empty() )
        return new Number(args[0]->GetRefs());
    throw BADARGS;
}

Data* NumberEqual(std::vector<Data*> args)
{
    if( args.size() == 2 )
        return new Bool(polymorphic_cast<Number*>(args[0])->GetValue() == polymorphic_cast<Number*>(args[1])->GetValue());
    throw BADARGS;
}

Data* ReaderCons(std::vector<Data*> args)
{
    if( args.size() == 2 )
        return new Cons(args[0], args[1]);
    throw BADARGS;
}

Data* Null(std::vector<Data*> args)
{
    if( args.size() == 1 )
        return new Bool(args[0]->IsNil());
    throw BADARGS;
}

Data* Display(std::vector<Data*> args)
{
    if( args.size() == 1 ) {
        std::cout << args[0]->AsString() << std::endl;
        return nil;
    }
    throw BADARGS;
}

int main( int argc, char *argv[] )
{
  Data * exp;
  Environment * global_env = new Environment();
  global_env->AddBinding(symbol_table->InternSymbol("nil"), nil);
  global_env->AddBinding(symbol_table->InternSymbol("null?"), PrimitiveProcedure::MakeProcedure(global_env, Null));
  global_env->AddBinding(symbol_table->InternSymbol("car"), PrimitiveProcedure::MakeProcedure(global_env, Car));
  global_env->AddBinding(symbol_table->InternSymbol("cdr"), PrimitiveProcedure::MakeProcedure(global_env, Cdr));
  global_env->AddBinding(symbol_table->InternSymbol("equal?"), PrimitiveProcedure::MakeProcedure(global_env, Equal));
  global_env->AddBinding(symbol_table->InternSymbol("+"), PrimitiveProcedure::MakeProcedure(global_env, NumberAdd));
  global_env->AddBinding(symbol_table->InternSymbol("-"), PrimitiveProcedure::MakeProcedure(global_env, NumberMinus));
  global_env->AddBinding(symbol_table->InternSymbol("*"), PrimitiveProcedure::MakeProcedure(global_env, NumberMul));
  global_env->AddBinding(symbol_table->InternSymbol("cons"), PrimitiveProcedure::MakeProcedure(global_env, ReaderCons));
  global_env->AddBinding(symbol_table->InternSymbol("refs"), PrimitiveProcedure::MakeProcedure(global_env, GetRefCount));
  global_env->AddBinding(symbol_table->InternSymbol("="), PrimitiveProcedure::MakeProcedure(global_env, NumberEqual));
  global_env->AddBinding(symbol_table->InternSymbol("display"), PrimitiveProcedure::MakeProcedure(global_env, Display));
  global_env->IncRefs();
  
  printf("loading...\n");
  printf(">> ");
  yyparse(&exp);
  while ( yychar != YYEOF ) {
    try { 
        std::cout << exp->Eval(global_env)->AsString() << std::endl;
        exp->IncRefs();
        exp->DecRefs();
    } catch (Exception e) {
        switch(e) {
            case MISSINGBINDING:
                std::cout << "Missing Binding: " << exp->AsString() << std::endl;
                break;
            case BADARGS:
                std::cout << "Unexpected argument(s) passed to a primitive function: " << exp->AsString() << std::endl;
                break;
            default:
                std::cout << "An error occurred, currently evaluating " << exp->AsString() << std::endl;
        }
    } catch (std::bad_cast e) {
        std::cout << "Badly formed expression: " << exp->AsString() << std::endl;
    }
    printf("\n");
    printf("\n>> ");
    yyparse(&exp);
  }
  global_env->DecRefs();
  printf("\nGood-bye.\n");
  exit(0);
}
